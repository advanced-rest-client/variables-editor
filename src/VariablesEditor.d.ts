/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   src/VariablesEditor.js
 */


// tslint:disable:variable-name Describing an API that's defined elsewhere.
// tslint:disable:no-any describes the API as best we are able today

import {VariablesConsumerMixin} from '@advanced-rest-client/variables-consumer-mixin/variables-consumer-mixin.js';

import {LitElement, html, css} from 'lit-element';

export {VariablesEditor};

declare namespace UiElements {

  /**
   * A variables editor is an element to render UI for `variables-manager`.
   *
   * It displays list of user defined environments and variables associated with
   * the  environment.
   *
   * This element requires compatible variables manager to be present in the DOM. It
   * uses browser event system to communicate with the manager. See `variables-manager`
   * documentation for detailed API for data exchange.
   *
   * ### Example
   *
   * ```html
   * <variables-editor></variables-editor>
   * <variables-manager></variables-manager>
   * ```
   */
  class VariablesEditor extends
    VariablesConsumerMixin(
    Object) {

    /**
     * When true then add variable button is hidden.
     */
    readonly addButtonHidden: Boolean|null;

    /**
     * Computed value, set to `true` if the environment can be removed.
     * Only `default` environment can't be deleted
     */
    readonly allowRemove: Boolean|null;
    readonly editorEnvName: any;

    /**
     * True if the environment editor is opened.
     */
    envEditorOpened: boolean|null|undefined;
    _filtered: any[]|null|undefined;

    /**
     * Enables compatibility with Anypoint platform
     */
    compatibility: boolean|null|undefined;

    /**
     * Enables Material Design Outlined inputs
     */
    outlined: boolean|null|undefined;
    connectedCallback(): void;
    disconnectedCallback(): void;

    /**
     * Dispatches bubbling and composed custom event.
     * By default the event is cancelable until `cancelable` property is set to false.
     *
     * @param type Event type
     * @param detail A detail to set
     * @param cancelable When false the event is not cancelable.
     */
    _dispatch(type: String|null, detail: any|null, cancelable: Boolean|null): CustomEvent|null;
    _selectorTemplate(): any;
    _addEnvFormTemplate(): any;
    _editorTemplate(): any;
    _emptySateTemplate(): any;
    render(): any;
    _variablesHandler(e: any): void;

    /**
     * Sends environment-updated event to the model
     *
     * @param value Anvironment value to update.
     */
    _dispatchEnvUpdated(value: object|null): CustomEvent|null;

    /**
     * Sends environment-deleted event to the model
     *
     * @param id ID of deleted environment
     */
    _dispatchEnvDeleted(id: String|null): CustomEvent|null;

    /**
     * Sends usage google analytics event
     *
     * @param action Action description
     */
    _sendGaEvent(action: String|null): CustomEvent|null;

    /**
     * Sends error event to google analytics
     *
     * @param message Exception message
     */
    _sendGaError(message: String|null): CustomEvent|null;

    /**
     * Opens environment editor.
     */
    openAddEnvironmentForm(): void;

    /**
     * Closes environment editor.
     */
    closeAddEnvironmentForm(): void;

    /**
     * Finds environment model by name.
     * The list of environments are stored in memory in environment selector.
     * To simplify the logic this element won't hold it's own copy of environments list.
     *
     * @param name Name of the environment to find.
     * @returns Environment model or undefined if not found.
     */
    _findEnvironment(name: String|null): object|null|undefined;

    /**
     * Validates user input when adding an environment.
     * It renders a message to the user if input did not passed the validation.
     *
     * @returns True if user input is valid.
     */
    _validateEnvironmentInput(name: String|null): Boolean|null;

    /**
     * Handler for the save action for add environment form.
     * Validates user input and sends `environment-updated` event to the model.
     */
    _addEnvironment(): Promise<any>|null;

    /**
     * Handler for the delete button.
     */
    _deleteEnvironment(): Promise<any>|null;

    /**
     * Add new, empty variable.
     */
    addVariable(): void;

    /**
     * Removes unsaved variable
     */
    _removeEmptyVariable(e: CustomEvent|null): void;

    /**
     * Opens documentation page for the module.
     */
    _openHelp(e: Event|null): Window|null|undefined;

    /**
     * Checks for "enter" key to add environment.
     */
    _addEnvInput(e: KeyboardEvent|null): void;

    /**
     * Validates user input when environment name change.
     */
    _revalidateEnvInput(e: Event|null): void;
  }
}
