/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   variable-item.html
 */

/// <reference path="../polymer/types/polymer-element.d.ts" />
/// <reference path="../paper-styles/paper-styles.d.ts" />
/// <reference path="../iron-flex-layout/iron-flex-layout.d.ts" />
/// <reference path="../paper-input/paper-input-container.d.ts" />
/// <reference path="../paper-input/paper-input-error.d.ts" />
/// <reference path="../iron-input/iron-input.d.ts" />
/// <reference path="../paper-icon-button/paper-icon-button.d.ts" />
/// <reference path="../paper-toast/paper-toast.d.ts" />
/// <reference path="../paper-checkbox/paper-checkbox.d.ts" />
/// <reference path="variable-editor-dialog.d.ts" />

declare namespace UiElements {

  /**
   * # `variable-item`
   *
   * It is a variable list item to be displayed in the `<variable-editor>`.
   *
   * ### Styling
   *
   * `<variable-item>` provides the following custom properties and mixins for styling:
   *
   * Custom property | Description | Default
   * ----------------|-------------|----------
   * `--variable-item` | Mixin applied to the element | `{}`
   * `--variable-item-name-input` | Mixin applied to the `paper-input`
   * for variable name | `{}`
   * `--variable-item-value-input` | Mixin applied to the `paper-input` for
   * variable value | `{}`
   * `--variable-item-checkbox` | Mixin applied to the state checkbox | `{}`
   * `--inline-fom-action-icon-color` | Theme variable, color of the delete
   * variable icon | `rgba(0, 0, 0, 0.74)`
   * `--inline-fom-action-icon-color-hover` | Theme variable, color of the
   * delete variable icon when hovering | `--accent-color` or `rgba(0, 0, 0, 0.74)`
   */
  class VariableItem extends Polymer.Element {

    /**
     * A variable database object.
     * Initially it will contain an _id and _rev object and data will be get from the database.
     * Special case is when creating new variable. It will then contain an initial data but no ID.
     */
    item: object|null|undefined;

    /**
     * A list of names that are restricted
     */
    reservedNames: any[]|null|undefined;

    /**
     * True if during the save another change occured and the item
     * schould be saved again.
     */
    _isDirty: boolean|null|undefined;

    /**
     * True if the item is currently being updated.
     */
    _updatingModel: boolean|null|undefined;
    connectedCallback(): void;
    disconnectedCallback(): void;
    _itemChanged(): void;

    /**
     * To be called when any `item` property change.
     * Updates variable value.
     */
    _somethingChanged(): void;

    /**
     * Requests `item` save in the database.
     */
    _updateItem(): void;

    /**
     * Handler for the remove button click.
     */
    _removeVariable(): void;
    _dispatchEmptyVarRemove(): void;
    _dispatchVarRemoved(id: any): void;
    _openVariableEditor(): void;
    _onVariableEditorClosed(e: any): void;
  }
}

interface HTMLElementTagNameMap {
  "variable-item": UiElements.VariableItem;
}
